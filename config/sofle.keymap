/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&caps_word { continue-list = <UNDERSCORE MINUS>; };

&led_strip { chain-length = <35>; };

&left_encoder { resolution = <2>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {


            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3    &kp N4        &kp N5                           &kp N6  &kp N7     &kp N8         &kp N9   &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W   &kp E     &kp R         &kp T                            &kp Y   &kp U      &kp I          &kp O    &kp P     &kp BACKSLASH
&kp ESC    &kp A   &kp S   &kp D     &kp F         &kp G                            &kp H   &kp J      &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X   &kp C     &kp V         &kp B   &kp C_MUTE    &none      &kp N   &kp M      &kp COMMA      &kp DOT  &kp FSLH  &kp RSHFT
                   &trans  &kp LALT  &kp LEFT_GUI  &mo 1   &kp SPACE     &kp ENTER  &mo 2   &kp RCTRL  &kp BACKSPACE  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        lower_layer {


            bindings = <
&trans  &kp F1          &kp F2    &kp F3              &kp F4                  &kp F5                                         &kp LG(SPACE)         &kp F7        &kp F8           &kp F9        &kp F10  &soft_off
&trans  &kp N1          &kp N2    &kp N3              &kp N4                  &kp N5                                         &kp N6                &kp N7        &kp N8           &kp N9        &kp N0   &bt BT_NXT
&trans  &kp LEFT_SHIFT  &mkp MB4  &kp LA(LEFT_ARROW)  &kp LA(RIGHT)           &kp F12                                        &kp LEFT              &kp NUMBER_4  &kp NUMBER_5     &kp NUMBER_6  &kp INS  &rgb_ug RGB_TOG
&trans  &trans          &kp HOME  &kp PG_UP           &kp LG(LA(LEFT_ARROW))  &kp LG(LA(RIGHT_ARROW))  &trans    &trans      &kp LG(LA(UP_ARROW))  &kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3  &kp DEL  &trans
                        &trans    &trans              &trans                  &trans                   &trans    &kp DELETE  &trans                &trans        &kp KP_NUMBER_0  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp LA(RIGHT_ARROW) LA(LEFT_ARROW)>;
        };

        raise_layer {


            bindings = <
&trans  &kp TILDE        &kp BACKSLASH     &kp LESS_THAN         &kp GREATER_THAN       &trans                                       &trans  &trans          &trans          &trans           &trans  &trans
&trans  &kp GRAVE        &kp SINGLE_QUOTE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS                                     &trans  &trans          &kp UP_ARROW    &trans           &trans  &trans
&trans  &kp UNDERSCORE   &kp EQUAL         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS                                    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &rgb_ug RGB_EFF  &kp PIPE          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SLASH  &bootloader      &rgb_ug RGB_TOG  &trans  &kp HOME        &kp PAGE_UP     &kp END          &trans  &trans
                         &trans            &trans                &trans                 &trans     &kp BACKSPACE    &trans           &trans  &trans          &kp PAGE_DOWN   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        conditional-layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans                &trans             &trans         &trans  &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp LG(LS(NUMBER_4))  &trans             &trans         &trans  &bt BT_NXT
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp LS(LA(H))         &kp LS(LA(ENTER))  &kp LS(LA(L))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans                &trans             &trans         &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans                &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        last-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
